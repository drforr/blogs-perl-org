#!/usr/bin/env perl

use strict;
use warnings;
use FindBin;
use lib "$FindBin::Bin/../lib";

use PearlBee::Helpers::Util qw( string_to_slug );

use Encode qw( decode_utf8 );

use DBI;
use Try::Tiny;
use Getopt::Long;

my ( $in_driver,   $out_driver   ) = ( 'mysql', 'Pg' );
my ( $in_database, $out_database ) = ( 'mt_blogs_perl_org', 'blogs_perl_org' );
my ( $in_user,     $out_user     ) = ( 'root', 'jgoff' );
my ( $in_password, $out_password ) = ( '', '' );
my ( $dry_run                    ) = ( 0 );

GetOptions(
  'in-driver=s'  => \$in_driver,
  'out-driver=s' => \$out_driver,
  'in-db=s'      => \$in_database,
  'out-db=s'     => \$out_database,
  'in-user=s'    => \$in_user,
  'out-user=s'   => \$out_user,
  'dry-run'      => \$dry_run,
);

my $in_dsn  = "dbi:$in_driver:database=$in_database";
my $out_dsn = "dbi:$out_driver:database=$out_database";

my $in_dbh  = DBI->connect( $in_dsn, $in_user, $in_password );
my $out_dbh = DBI->connect( $out_dsn, $out_user, $out_password );

=head1 USAGE

  migration [options]

  Options:

    --in-driver  # Choose a database driver for the import database
    --out-driver # The same for the resulting database
    --in-db      # Choose the database to import from
    --out-db     # The database to export to
    --in-user    # Choose the user to import from
    --out-user   # The user to export to

    --dry-run    # Read the database, but don't write to the export database.

=cut

$|++;

my $AVATAR_PATH   = '/avatars';
my $PER_USER_PATH = '/users';

sub munge_asset_file_path {
  my $in_asset = shift;
  $in_asset->{asset_file_path} =~ s{^\%s}{$AVATAR_PATH};
  $in_asset->{asset_file_path} =~
    s{^\%r}{$PER_USER_PATH/$in_asset->{author_basename}};
}

###############################################################################

sub map_user {          
  my $user = shift;         
  return {              
    id                 => $user->{author_id},
    name               => decode_utf8($user->{author_nickname}),
    username           => $user->{author_basename},
    password           => $user->{author_password},
    preferred_language => $user->{author_preferred_language},
    register_date      => $user->{author_created_on},
    email              => decode_utf8($user->{author_email}),
    role               => $user->{author_is_superuser} ? 'admin' : 'author',
    status             => $user->{author_status} == 1 ? 'active' : 'inactive',
    biography          => decode_utf8($user->{author_meta_vclob}),
  };
}              
    
my %users;

sub migrate_users {
  print "migrating users: ";
  my $in_sth = $in_dbh->prepare( <<'EOS' );
   SELECT a.author_id,
          a.author_nickname,
          a.author_basename,
          a.author_password,
          a.author_preferred_language,
          a.author_created_on,
          a.author_email,
          a.author_is_superuser,
          a.author_status,
          am.author_meta_vclob
     FROM mt_author a
LEFT JOIN mt_author_meta am
       ON a.author_id = am.author_meta_author_id
    WHERE am.author_meta_type = 'field.about_blurb'
 GROUP BY a.author_id
 ORDER BY a.author_id
EOS

  my @fields = qw( id name username password status preferred_language register_date email role biography );
  my $out_sth = $out_dbh->prepare( <<'EOS' );
INSERT INTO users(id,
                  name,
                  username,
                  password,
                  status,
                  preferred_language,
                  register_date,
                  email,
                  role,
                  biography)
           VALUES(?,?,?,?,?,?,?,?,?,?)
EOS

  $in_sth->execute();

  my $count = 0;
  while ( my $in_user = $in_sth->fetchrow_hashref  ) {
    print '.' if $count++ % 100 == 0;

    my $out_user = map_user($in_user);
    if ( !$out_user->{username} and $out_user->{name} ) {
      warn "### OpenID user ID $out_user->{id} found, defaulting username\n";
      $out_user->{username} = $out_user->{name};
    }

    try {
      $out_sth->execute( @{$out_user}{@fields} ) unless $dry_run;
      $users{$out_user->{id}} = 1;
    }
    catch {
      die "Failed to insert user '$in_user->{name}: $_ $!\n";
    };
  }
  print "\n";
}

###############################################################################

sub create_avatars {
  print "creating user avatars: ";
  my $in_sth = $in_dbh->prepare( <<EOS );
SELECT author_id,
       author_basename,
       asset_file_path
  FROM mt_asset
  JOIN mt_author
    ON author_userpic_asset_id = asset_id
EOS

  my @fields = qw( asset_file_path author_id );
  my $out_sth = $out_dbh->prepare( <<'EOS' );
UPDATE users SET avatar_path = ? WHERE id = ?
EOS

  $in_sth->execute;

  my $count = 0;
  while ( my $in_asset = $in_sth->fetchrow_hashref ) {
    print '.' if $count++ % 100 == 0;
    munge_asset_file_path( $in_asset );

    try {
      $out_sth->execute( @{$in_asset}{@fields} ) unless $dry_run;
    }
    catch {
      die "Failed to create avatar for '$in_asset->{author_id}: $_ $!\n";
    };
  }
  print "\n";
}

###############################################################################

sub map_blog {
  my $blog = shift;
  my $slug = string_to_slug( $blog->{blog_description} );
  return {
    id           => $blog->{blog_id},
    user_id      => $blog->{association_author_id},
    name         => decode_utf8( $blog->{blog_name} ),
    slug         => decode_utf8( $slug ),
    description  => decode_utf8( $blog->{blog_description} ),
    created_date => $blog->{blog_created_on},
    edited_date  => $blog->{blog_modified_on},
  };
}

my %blog_user; # key $blog_id, value $user_id
my %blog;

sub migrate_blogs {
  my ( $users ) = @_;
  print "migrating blogs: ";
  my $in_sth = $in_dbh->prepare( <<'EOS' );
   SELECT b.blog_id,
          a.association_author_id,
          b.blog_name,
          b.blog_description,
          b.blog_created_on,
          b.blog_modified_on
     FROM mt_blog b
LEFT JOIN mt_association a
       ON b.blog_id = a.association_blog_id
ORDER BY blog_id
EOS

  my @fields = qw( id name slug description created_date edited_date );
  my $out_sth = $out_dbh->prepare( <<'EOS' );
INSERT INTO blog(id,name,slug,description,created_date,edited_date)
          VALUES(?,?,?,?,?,?)
EOS

  my @fields_owner = qw( id user_id );
  my $out_owner_sth = $out_dbh->prepare( <<'EOS' );
INSERT INTO blog_owners(blog_id,user_id)
          VALUES(?,?)
EOS

  $in_sth->execute;

  my $count  = 0;
  while ( my $in_blog = $in_sth->fetchrow_hashref ) {
    print '.' if $count++ % 100 == 0;

    my $out_blog = map_blog( $in_blog );
    next if $out_blog->{name} eq 'blogs.perl.org'; # Skip admin "user"

    unless ( $out_blog->{user_id} ) {
      warn "*** Skipping blog ID $out_blog->{id}: no user ID\n";
      next;
    }
    unless ( $users{$out_blog->{user_id}} ) {
      warn "*** Skipping blog ID $out_blog->{id}: invalid user ID $out_blog->{user_id}\n";
      next;
    }
    $blog{$out_blog->{user_id}} = 1;

    $out_sth->execute( @{$out_blog}{@fields} ) unless $dry_run;

    $blog_user{$out_blog->{id}} = $out_blog->{user_id};
    $out_owner_sth->execute( @{$out_blog}{@fields_owner} ) unless $dry_run;
  }
  print "\n";
}

###############################################################################

my %post_type = (
  '__default__'               => 'HTML',
  '0'                         => 'HTML',
  'richtext'                  => 'RichText',
  'textile_2'                 => 'Textile2',
  'markdown_with_smartypants' => 'Markdown_With_Smartypants',
  'markdown'                  => 'Markdown'
);

sub map_post {
  my $post         = shift;
  my $post_type    = 'HTML';
  my $content      = $post->{entry_text};
  my $content_more = $post->{entry_text_more};

  $post_type = $post_type{$post->{entry_convert_break}} if
    exists $post->{entry_convert_break};

  return {
    id           => $post->{entry_id},
    title        => decode_utf8($post->{entry_title}),
    slug         => $post->{entry_basename},
    description  => $post->{entry_basename}, # XXX ?
    #cover varchar(300) NOT NULL,
    content      => decode_utf8($content),
    content_more => decode_utf8($content_more),
    keywords     => decode_utf8($post->{entry_keywords}),
    created_date => $post->{entry_authored_on},
    type         => $post_type,
    #status post_status DEFAULT 'draft',
    status       => 'published', # XXX Imported posts are already published
    user_id      => $post->{entry_author_id},
    blog_id      => $post->{entry_blog_id},
  };
}

my %user_post; #key $user_id, value @{ $post_id }
my %blog_post; #key $blog_id, value @{ $post }
my %tag; #key $tag_name, value ... will be tag ID eventually.
my %tag_split;
my %post_keyword; #key $post_id, value $tag_name
my %page_keyword; #key $page_id, value $tag_name

sub migrate_posts {
  my ( $tag, $tag_split ) = @_;
  print "migrating posts: ";
  my $in_sth = $in_dbh->prepare( <<'EOS' );
  SELECT entry_title,
         entry_text,
         entry_text_more,
         entry_id,
         entry_title,
         entry_basename,
         entry_text,
         entry_keywords,
         entry_authored_on,
         entry_author_id,
         entry_blog_id
    FROM mt_entry
   WHERE entry_class = 'entry'
ORDER BY entry_id
EOS

  my @fields =
    qw(id title slug description content content_more created_date status user_id);
  my $out_sth = $out_dbh->prepare( <<'EOS' );
INSERT INTO post(id,
                 title,
                 slug,
                 description,
                 content,
                 content_more,
                 created_date,
                 status,
                 user_id)
          VALUES(?,?,?,?,?,?,?,?,?)
EOS

  $in_sth->execute();

  my $count  = 0;
  while ( my $in_post = $in_sth->fetchrow_hashref ) {
    print '.' if $count++ % 100 == 0;

    my $out_post = map_post( $in_post );
    push @{ $user_post{ $out_post->{user_id} } }, $out_post->{id};
    push @{ $blog_post{ $out_post->{blog_id} } }, $out_post->{id};
    if ( $out_post->{keywords} ) {
      $tag_split->{$_} = 1 for split( /\s*,\s*/, $out_post->{keywords} );
      $post_keyword{$out_post->{id}} = $out_post->{keywords};
    }
    $out_sth->execute( @{$out_post}{@fields} ) unless $dry_run;
  }
  print "\n";
}

###############################################################################

sub map_page {
  my $page          = shift;
  my $page_type     = 'HTML';
  my $slug          = string_to_slug( $page->{entry_title} );
  my $content       = $page->{entry_text};
  my $extra_content = $page->{entry_text_more};

  $page_type = $post_type{$page->{entry_convert_break}} if
    exists $page->{entry_convert_break};

  return {
    id            => $page->{entry_id},
    title         => decode_utf8($page->{entry_title}),
    slug          => decode_utf8($slug),
    description   => $page->{entry_basename}, # XXX ?
    #cover varchar(300) NOT NULL,
    content       => decode_utf8($content),
    extra_content => decode_utf8($extra_content),
    keywords      => decode_utf8($page->{entry_keywords}),
    created_date  => $page->{entry_authored_on},
    type          => $page_type,
    #status post_status DEFAULT 'draft',
    status        => 'published', # XXX Imported posts are already published
    user_id       => $page->{entry_author_id},
    blog_id       => $page->{entry_blog_id},
  };
}

my %user_page; #key $user_id, value @{ $page_id }
my %blog_page; #key $blog_id, value @{ $page }

sub migrate_pages {
  my ( $tag, $tag_split ) = @_;
  print "migrating pages ";
  my $in_sth = $in_dbh->prepare( <<'EOS' );
  SELECT entry_title,
         entry_text,
         entry_text_more,
         entry_id,
         entry_title,
         entry_basename,
         entry_text,
         entry_keywords,
         entry_authored_on,
         entry_author_id,
         entry_blog_id
    FROM mt_entry
   WHERE entry_class = 'page'
ORDER BY entry_id
EOS

  my @fields =
    qw(id title slug description content content_more created_date status user_id);
  my $out_sth = $out_dbh->prepare( <<'EOS' );
INSERT INTO page(id,
                 title,
                 slug,
                 description,
                 content,
                 content_more,
                 created_date,
                 status,
                 user_id)
          VALUES(?,?,?,?,?,?,?,?,?)
EOS

  $in_sth->execute();

  my $count  = 0;
  while ( my $in_page = $in_sth->fetchrow_hashref ) {
    print '.' if $count++ % 100 == 0;

    my $out_page = map_page( $in_page );
    push @{ $user_page{ $out_page->{user_id} } }, $out_page->{id};
    push @{ $blog_page{ $out_page->{blog_id} } }, $out_page->{id};
    if ( $out_page->{keywords} ) {
      $tag_split->{$_} = 1 for split( /\s*,\s*/, $out_page->{keywords} );
      $page_keyword{$out_page->{id}} = $out_page->{keywords};
    }
    $out_sth->execute( @{$out_page}{@fields} ) unless $dry_run;
  }
  print "\n";
}

###############################################################################

sub migrate_some_tags {
  my ( $tag ) = @_;
  print "migrating some posts: ";
  my $in_sth = $in_dbh->prepare( <<'EOS' );
    SELECT ot.objecttag_id,
           t.tag_name
      FROM mt_objecttag ot
      JOIN mt_tag t
        ON t.tag_id = ot.objecttag_tag_id
  ORDER BY objecttag_id
EOS

  $in_sth->execute;

  my $count = 0;
  while ( my $in_category = $in_sth->fetchrow_hashref ) {
    print '.' if $count++ % 100 == 0;
#    $tag->{$in_category->{tag_name}} = 1;
  }
  print "\n";
}

###############################################################################

sub synthesize_tags {
  my ( $tag, $tag_split ) = @_;
  print "synthesizing tags ";
  my $out_sth = $out_dbh->prepare( <<'EOS' );
INSERT INTO tag( id, name, slug )
            VALUES( ?, ?, ? )
EOS

  my $count = 0;

  my $index = 1;
  for my $name ( sort keys %{ $tag_split } ) {
    print '.' if $count++ % 100 == 0;

    $tag_split->{$name} = $index++;
    my $slug = string_to_slug( $name );
    $out_sth->execute($tag_split->{$name}, $name, $slug) unless $dry_run;
  }
  print "\n";
}

###############################################################################

sub synthesize_post_tags {
  my ( $tag, $tag_split ) = @_;
  print "synthesizing post tags ";
  my $out_sth = $out_dbh->prepare( <<'EOS' );
INSERT INTO post_tag( post_id, tag_id ) VALUES( ?, ? )
EOS

  my $count = 0;
  for my $post_id ( keys %post_keyword ) {

    unless ( $post_keyword{$post_id} ) {
      warn "*** Skipping post ID $post_id: no tags\n";
      next;
    }

    my $keyword = $post_keyword{$post_id};
    for my $word ( split /\s*,\s*/, $keyword ) {
      unless ( $tag_split->{$word} ) {
        warn "*** Couldn't find a tag for '$word'\n";
      }
      $out_sth->execute($post_id, $tag_split->{$word})
        unless $dry_run;
    }
  }
  print "\n";
}

###############################################################################

sub synthesize_page_tags {
  my ( $tag, $tag_split ) = @_;
  print "synthesizing page tags ";
  my $out_sth = $out_dbh->prepare( <<'EOS' );
INSERT INTO page_tag( page_id, tag_id ) VALUES( ?, ? )
EOS

  my $count = 0;
  for my $page_id ( keys %page_keyword ) {

    unless ( $page_keyword{$page_id} ) {
      warn "*** Skipping page ID $page_id: no tags\n";
      next;
    }

    my $keyword = $page_keyword{$page_id};
    for my $word ( split /\s*,\s*/, $keyword ) {
      unless ( $tag_split->{$word} ) {
        warn "*** Couldn't find a tag for '$word'\n";
      }
      $out_sth->execute($page_id, $tag_split->{$word})
        unless $dry_run;
    }
  }
  print "\n";
}

###############################################################################

sub map_comment {
  my $comment = shift;
  my $status  = $comment->{comment_visible} == 1 ? 'approved' : 'pending';
  return {
    id           => $comment->{comment_id},
    content      => decode_utf8($comment->{comment_text}),
    fullname     => decode_utf8($comment->{comment_author}),
    email        => $comment->{comment_email},
    website      => $comment->{comment_url},
#  avatar varchar(255) DEFAULT NULL,
    comment_date => $comment->{comment_created_on},
#  type post_format DEFAULT 'HTML', # Remain default
    status       => $status,
    post_id      => $comment->{comment_entry_id},
    uid          => $comment->{comment_commenter_id},
  };
}

sub migrate_comments {
  my ( $users ) = @_;
  print "migrating comments: ";
  my $in_sth = $in_dbh->prepare('SELECT * FROM mt_comment ORDER BY comment_id');
  my @fields = qw( id content fullname email website comment_date status post_id uid reply_to );
  my $out_sth = $out_dbh->prepare( <<'EOS' );
INSERT INTO comment(id,
                    content,
                    fullname,
                    email,
                    website,
                    comment_date,
                    status,
                    post_id,
                    uid,
                    reply_to)
            VALUES(?,?,?,?,?,?,?,?,?,?)
EOS
  $in_sth->execute();

  my $count  = 0;
  while ( my $in_comment = $in_sth->fetchrow_hashref ) {
    print '.' if $count++ % 100 == 0;
    next unless $in_comment->{comment_commenter_id}; # XXX Eliminate spam?

    my $out_comment = map_comment($in_comment);

    unless ( $users{$out_comment->{uid}} ) {
      warn "*** Skipping comment ID $out_comment->{id}: invalid user ID $out_comment->{uid}\n";
      next;
    }

    $out_sth->execute( @{$out_comment}{@fields} ) unless $dry_run;
  }
  print "\n";
}

###############################################################################

sub map_category {
  my $category = shift;
  my $slug     = string_to_slug( $category->{category_label} );
  return {
    id      => $category->{category_id},
    name    => decode_utf8($category->{category_label}),
    slug    => decode_utf8($slug),
    user_id => $category->{category_author_id},
    blog_id => $category->{category_blog_id},
  };
}

my %category;

sub migrate_categories {
  my ( $blog,$users ) = @_;
  print "migrating categories: ";
  my $in_sth = $in_dbh->prepare('SELECT * FROM mt_category ORDER BY category_id');
  my $out_sth = $out_dbh->prepare(
    'INSERT INTO category(id,name,slug,user_id) VALUES(?,?,?,?)'
  );
  my $out_blog_sth = $out_dbh->prepare(
    'INSERT INTO blog_categories(blog_id,category_id) VALUES(?,?)'
  );
  $in_sth->execute();

  my $count  = 0;
  while ( my $in_category = $in_sth->fetchrow_hashref ) {
    print '.' if $count++ % 100 == 0;

    my $out_category = map_category($in_category);

    unless ( $users->{$out_category->{user_id}} ) {
      warn "*** Skipping category ID $out_category->{id}: invalid user ID\n";
      next;
    }
    unless ( $blog->{$out_category->{blog_id}} ) {
      warn "*** Skipping category ID $out_category->{blog_id}: invalid blog ID $out_category->{blog_id}\n";
      next;
    }

    $category{$out_category->{id}} = 1;

    unless ( $dry_run ) {
      $out_sth->execute(
          @{$out_category}{qw( id name slug user_id )}
      );
      $out_blog_sth->execute(
          @{$out_category}{qw( blog_id id )}
      );
    }
  }
  print "\n";
}

###############################################################################

sub map_post_category {
  my $post_category = shift;
  return {
    category_id => $post_category->{category_id},
    blog_id     => $post_category->{blog_id},
  };
}

sub synthesize_post_categories {
  my ( $category, $blog ) = @_;
  print "synthesizing post categories ";
  my $in_sth = $in_dbh->prepare( <<'EOS' );
SELECT c.category_id,
       b.blog_id
  FROM mt_category c
  JOIN mt_blog b
    ON c.category_id = b.blog_id
EOS

  my $out_sth = $out_dbh->prepare( <<'EOS' );
INSERT INTO post_category( post_id, category_id ) VALUES( ?, ? )
EOS

  my $count = 0;

  $in_sth->execute;
  while ( my $in_blog_category = $in_sth->fetchrow_hashref ) {
    print '.' if $count++ % 100 == 0;
    my $out_blog_category = map_post_category( $in_blog_category );

    unless ( $blog->{$out_blog_category->{blog_id}} ) {
      warn "*** Skipping post ID $out_blog_category->{category_id}: invalid blog ID $out_blog_category->{blog_id}\n";
      next;
    }
    unless ( $category->{$out_blog_category->{category_id}} ) {
      warn "*** Skipping post ID $out_blog_category->{category_id}: invalid category ID $out_blog_category->{category_id}\n";
      next;
    }

    for my $post_id ( @{ $blog_post{$out_blog_category->{blog_id}} } ) {
      print '.' if $count++ % 100 == 0;

      $out_sth->execute($post_id, $out_blog_category->{category_id})
        unless $dry_run;
    }
  }
  print "\n";
}

###############################################################################

sub map_page_category {
  my $page_category = shift;
  return {
    category_id => $page_category->{category_id},
    blog_id     => $page_category->{blog_id},
  };
}

sub synthesize_page_categories {
  print "synthesizing page categories ";
  my $in_sth = $in_dbh->prepare( <<'EOS' );
SELECT c.category_id,
       b.blog_id
  FROM mt_category c
  JOIN mt_blog b
    ON c.category_id = b.blog_id
EOS

  my $out_sth = $out_dbh->prepare( <<'EOS' );
INSERT INTO page_category( page_id, category_id ) VALUES( ?, ? )
EOS

  my $count = 0;

  $in_sth->execute;
  while ( my $in_blog_category = $in_sth->fetchrow_hashref ) {
    print '.' if $count++ % 100 == 0;
    my $out_blog_category = map_page_category( $in_blog_category );

    for my $page_id ( @{ $blog_page{$out_blog_category->{blog_id}} } ) {
      print '.' if $count++ % 100 == 0;

      $out_sth->execute($page_id, $out_blog_category->{category_id})
        unless $dry_run;
    }
  }
  print "\n";
}

###############################################################################

sub map_asset {
  my $asset = shift;
  return {
    id        => $asset->{asset_id},
    blog_id   => $asset->{asset_blog_id},
    user_id   => $asset->{asset_created_by},
    file_ext  => $asset->{asset_file_ext},
    file_name => $asset->{asset_file_name},
    file_path => $asset->{asset_file_path},
  };
}

sub migrate_assets {
  print "migrating assets: ";
  my $in_sth = $in_dbh->prepare('SELECT * FROM mt_asset ORDER BY asset_id');
  my @fields = qw( id blog_id user_id file_ext file_name file_path );
  my $out_sth = $out_dbh->prepare(
    'INSERT INTO asset(id,blog_id,user_id,file_ext,file_name,file_path) VALUES(?,?,?,?,?,?)'
  );
  $in_sth->execute();

  my $count  = 0;
  while ( my $in_asset = $in_sth->fetchrow_hashref ) {
    print '.' if $count++ % 100 == 0;
    next if $in_asset->{asset_blog_id} == 0; # XXX Avatar assets are skipped.

    my $out_asset = map_asset($in_asset);
    $out_sth->execute( @{$out_asset}{@fields} ) unless $dry_run;
  }
  print "\n";
}

###############################################################################

sub update_sequences {
  print "Updating sequences: ";
  my @tables = qw( users blog post comment category tag asset  );

  for my $table_name ( @tables ) {
    $out_dbh->do( <<"EOS" );
select setval('${table_name}_id_seq',
                ( select max( id ) from ${table_name} ) + 1, true )
EOS
  }

  print "\n";
}

###############################################################################

migrate_users;
create_avatars;
migrate_blogs( \%users );
migrate_posts( \%tag, \%tag_split );
migrate_pages( \%tag, \%tag_split );
migrate_some_tags( \%tag );
synthesize_tags( \%tag, \%tag_split );
synthesize_post_tags( \%tag, \%tag_split );
synthesize_page_tags( \%tag, \%tag_split );
migrate_comments( \%users );
migrate_categories( \%blog, \%users );
synthesize_post_categories( \%category, \%blog );
synthesize_page_categories;
migrate_assets;
update_sequences;
